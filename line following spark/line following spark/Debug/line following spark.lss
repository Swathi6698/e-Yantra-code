
line following spark.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000012  00800060  00800060  00000702  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000e58  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be8  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000237  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058e  00000000  00000000  00001d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000022a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f9  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000380  00000000  00000000  00002741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  8a:	0c 94 45 03 	jmp	0x68a	; 0x68a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	89 ef       	ldi	r24, 0xF9	; 249
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcd_set_4bit+0x4>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <lcd_set_4bit+0xa>
  9c:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  9e:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  a0:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
  a2:	80 e3       	ldi	r24, 0x30	; 48
  a4:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  a6:	aa 9a       	sbi	0x15, 2	; 21
  a8:	e1 ee       	ldi	r30, 0xE1	; 225
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_set_4bit+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_set_4bit+0x20>
  b2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  b4:	aa 98       	cbi	0x15, 2	; 21
  b6:	e9 ef       	ldi	r30, 0xF9	; 249
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_set_4bit+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_set_4bit+0x2e>
  c0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  c2:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  c4:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
  c6:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  c8:	aa 9a       	sbi	0x15, 2	; 21
  ca:	e1 ee       	ldi	r30, 0xE1	; 225
  cc:	f4 e0       	ldi	r31, 0x04	; 4
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_set_4bit+0x3c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_set_4bit+0x42>
  d4:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  d6:	aa 98       	cbi	0x15, 2	; 21
  d8:	e9 ef       	ldi	r30, 0xF9	; 249
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_set_4bit+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_set_4bit+0x50>
  e2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  e4:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  e6:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
  e8:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  ea:	aa 9a       	sbi	0x15, 2	; 21
  ec:	81 ee       	ldi	r24, 0xE1	; 225
  ee:	94 e0       	ldi	r25, 0x04	; 4
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_set_4bit+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_set_4bit+0x64>
  f6:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  f8:	aa 98       	cbi	0x15, 2	; 21
  fa:	e9 ef       	ldi	r30, 0xF9	; 249
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_set_4bit+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_set_4bit+0x72>
 104:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 106:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 108:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 10e:	aa 9a       	sbi	0x15, 2	; 21
 110:	81 ee       	ldi	r24, 0xE1	; 225
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_set_4bit+0x82>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_set_4bit+0x88>
 11a:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 11c:	aa 98       	cbi	0x15, 2	; 21
}
 11e:	08 95       	ret

00000120 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 120:	95 b3       	in	r25, 0x15	; 21
 122:	9f 70       	andi	r25, 0x0F	; 15
 124:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
 126:	95 b3       	in	r25, 0x15	; 21
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 128:	28 2f       	mov	r18, r24
 12a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 12c:	92 2b       	or	r25, r18
 12e:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
 130:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 132:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 134:	aa 9a       	sbi	0x15, 2	; 21
 136:	e1 ee       	ldi	r30, 0xE1	; 225
 138:	f4 e0       	ldi	r31, 0x04	; 4
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_wr_command+0x1a>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_wr_command+0x20>
 140:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 142:	aa 98       	cbi	0x15, 2	; 21
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 144:	95 b3       	in	r25, 0x15	; 21
 146:	9f 70       	andi	r25, 0x0F	; 15
 148:	95 bb       	out	0x15, r25	; 21
	lcd_port |= cmd;
 14a:	95 b3       	in	r25, 0x15	; 21
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 14c:	82 95       	swap	r24
 14e:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 150:	89 2b       	or	r24, r25
 152:	85 bb       	out	0x15, r24	; 21
	cbit(lcd_port,RS);
 154:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 156:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 158:	aa 9a       	sbi	0x15, 2	; 21
 15a:	81 ee       	ldi	r24, 0xE1	; 225
 15c:	94 e0       	ldi	r25, 0x04	; 4
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_wr_command+0x3e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_wr_command+0x44>
 164:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 166:	aa 98       	cbi	0x15, 2	; 21
}
 168:	08 95       	ret

0000016a <lcd_init>:
 16a:	89 ef       	ldi	r24, 0xF9	; 249
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_init+0x4>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_init+0xa>
 174:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
 176:	88 e2       	ldi	r24, 0x28	; 40
 178:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
 188:	8e e0       	ldi	r24, 0x0E	; 14
 18a:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
}
 194:	08 95       	ret

00000196 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 196:	95 b3       	in	r25, 0x15	; 21
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
 19c:	95 b3       	in	r25, 0x15	; 21
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 19e:	28 2f       	mov	r18, r24
 1a0:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1a2:	92 2b       	or	r25, r18
 1a4:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 1a6:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 1a8:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 1aa:	aa 9a       	sbi	0x15, 2	; 21
 1ac:	e1 ee       	ldi	r30, 0xE1	; 225
 1ae:	f4 e0       	ldi	r31, 0x04	; 4
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_wr_char+0x1a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_wr_char+0x20>
 1b6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1b8:	aa 98       	cbi	0x15, 2	; 21

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 1ba:	95 b3       	in	r25, 0x15	; 21
 1bc:	9f 70       	andi	r25, 0x0F	; 15
 1be:	95 bb       	out	0x15, r25	; 21
	lcd_port |= letter;
 1c0:	95 b3       	in	r25, 0x15	; 21
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 1c2:	82 95       	swap	r24
 1c4:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 1c6:	89 2b       	or	r24, r25
 1c8:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,RS);
 1ca:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 1cc:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 1ce:	aa 9a       	sbi	0x15, 2	; 21
 1d0:	81 ee       	ldi	r24, 0xE1	; 225
 1d2:	94 e0       	ldi	r25, 0x04	; 4
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_wr_char+0x3e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_wr_char+0x44>
 1da:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1dc:	aa 98       	cbi	0x15, 2	; 21
}
 1de:	08 95       	ret

000001e0 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
}
 1e6:	08 95       	ret

000001e8 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
	while(*str != '\0')
 1ee:	88 81       	ld	r24, Y
 1f0:	88 23       	and	r24, r24
 1f2:	31 f0       	breq	.+12     	; 0x200 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 1f4:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 1f6:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 1fa:	89 91       	ld	r24, Y+
 1fc:	88 23       	and	r24, r24
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	79 f0       	breq	.+30     	; 0x228 <lcd_cursor+0x22>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	18 f4       	brcc	.+6      	; 0x214 <lcd_cursor+0xe>
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	c9 f4       	brne	.+50     	; 0x244 <lcd_cursor+0x3e>
 212:	05 c0       	rjmp	.+10     	; 0x21e <lcd_cursor+0x18>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	69 f0       	breq	.+26     	; 0x232 <lcd_cursor+0x2c>
 218:	84 30       	cpi	r24, 0x04	; 4
 21a:	a1 f4       	brne	.+40     	; 0x244 <lcd_cursor+0x3e>
 21c:	0f c0       	rjmp	.+30     	; 0x23c <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 21e:	86 2f       	mov	r24, r22
 220:	81 58       	subi	r24, 0x81	; 129
 222:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
 226:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 228:	86 2f       	mov	r24, r22
 22a:	81 54       	subi	r24, 0x41	; 65
 22c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
 230:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 232:	86 2f       	mov	r24, r22
 234:	8d 56       	subi	r24, 0x6D	; 109
 236:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
 23a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 23c:	86 2f       	mov	r24, r22
 23e:	8d 52       	subi	r24, 0x2D	; 45
 240:	0e 94 90 00 	call	0x120	; 0x120 <lcd_wr_command>
 244:	08 95       	ret

00000246 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	8a 01       	movw	r16, r20
 250:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 252:	88 23       	and	r24, r24
 254:	11 f0       	breq	.+4      	; 0x25a <lcd_print+0x14>
 256:	66 23       	and	r22, r22
 258:	19 f4       	brne	.+6      	; 0x260 <lcd_print+0x1a>
	{
		lcd_home();
 25a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_home>
 25e:	02 c0       	rjmp	.+4      	; 0x264 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 260:	0e 94 03 01 	call	0x206	; 0x206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 264:	c5 30       	cpi	r28, 0x05	; 5
 266:	d1 05       	cpc	r29, r1
 268:	71 f4       	brne	.+28     	; 0x286 <lcd_print+0x40>
	{
		million=value/10000+48;
 26a:	c8 01       	movw	r24, r16
 26c:	60 e1       	ldi	r22, 0x10	; 16
 26e:	77 e2       	ldi	r23, 0x27	; 39
 270:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodhi4>
 274:	cb 01       	movw	r24, r22
 276:	c0 96       	adiw	r24, 0x30	; 48
 278:	90 93 64 00 	sts	0x0064, r25
 27c:	80 93 63 00 	sts	0x0063, r24
		lcd_wr_char(million);
 280:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_wr_char>
 284:	03 c0       	rjmp	.+6      	; 0x28c <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 286:	c4 30       	cpi	r28, 0x04	; 4
 288:	d1 05       	cpc	r29, r1
 28a:	b9 f4       	brne	.+46     	; 0x2ba <lcd_print+0x74>
	{
		temp = value/1000;
 28c:	c8 01       	movw	r24, r16
 28e:	68 ee       	ldi	r22, 0xE8	; 232
 290:	73 e0       	ldi	r23, 0x03	; 3
 292:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodhi4>
 296:	cb 01       	movw	r24, r22
 298:	70 93 66 00 	sts	0x0066, r23
 29c:	60 93 65 00 	sts	0x0065, r22
		thousand = temp%10 + 48;
 2a0:	6a e0       	ldi	r22, 0x0A	; 10
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodhi4>
 2a8:	c0 96       	adiw	r24, 0x30	; 48
 2aa:	90 93 71 00 	sts	0x0071, r25
 2ae:	80 93 70 00 	sts	0x0070, r24
		lcd_wr_char(thousand);
 2b2:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_wr_char>
		flag=1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 2bc:	c3 30       	cpi	r28, 0x03	; 3
 2be:	d1 05       	cpc	r29, r1
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <lcd_print+0x80>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	b1 f4       	brne	.+44     	; 0x2f2 <lcd_print+0xac>
	{
		temp = value/100;
 2c6:	c8 01       	movw	r24, r16
 2c8:	64 e6       	ldi	r22, 0x64	; 100
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodhi4>
 2d0:	cb 01       	movw	r24, r22
 2d2:	70 93 66 00 	sts	0x0066, r23
 2d6:	60 93 65 00 	sts	0x0065, r22
		hundred = temp%10 + 48;
 2da:	6a e0       	ldi	r22, 0x0A	; 10
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodhi4>
 2e2:	c0 96       	adiw	r24, 0x30	; 48
 2e4:	90 93 6d 00 	sts	0x006D, r25
 2e8:	80 93 6c 00 	sts	0x006C, r24
		lcd_wr_char(hundred);
 2ec:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_wr_char>
		flag=1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 2f2:	c2 30       	cpi	r28, 0x02	; 2
 2f4:	d1 05       	cpc	r29, r1
 2f6:	11 f0       	breq	.+4      	; 0x2fc <lcd_print+0xb6>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	b1 f4       	brne	.+44     	; 0x328 <lcd_print+0xe2>
	{
		temp = value/10;
 2fc:	2a e0       	ldi	r18, 0x0A	; 10
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	c8 01       	movw	r24, r16
 302:	b9 01       	movw	r22, r18
 304:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodhi4>
 308:	cb 01       	movw	r24, r22
 30a:	70 93 66 00 	sts	0x0066, r23
 30e:	60 93 65 00 	sts	0x0065, r22
		tens = temp%10 + 48;
 312:	b9 01       	movw	r22, r18
 314:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodhi4>
 318:	c0 96       	adiw	r24, 0x30	; 48
 31a:	90 93 6b 00 	sts	0x006B, r25
 31e:	80 93 6a 00 	sts	0x006A, r24
		lcd_wr_char(tens);
 322:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_wr_char>
		flag=1;
 326:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 328:	c1 30       	cpi	r28, 0x01	; 1
 32a:	d1 05       	cpc	r29, r1
 32c:	11 f0       	breq	.+4      	; 0x332 <lcd_print+0xec>
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	61 f4       	brne	.+24     	; 0x34a <lcd_print+0x104>
	{
		unit = value%10 + 48;
 332:	c8 01       	movw	r24, r16
 334:	6a e0       	ldi	r22, 0x0A	; 10
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodhi4>
 33c:	c0 96       	adiw	r24, 0x30	; 48
 33e:	90 93 6f 00 	sts	0x006F, r25
 342:	80 93 6e 00 	sts	0x006E, r24
		lcd_wr_char(unit);
 346:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_wr_char>
	}
	if(digits>5)
 34a:	c6 30       	cpi	r28, 0x06	; 6
 34c:	d1 05       	cpc	r29, r1
 34e:	1c f0       	brlt	.+6      	; 0x356 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 350:	85 e4       	ldi	r24, 0x45	; 69
 352:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_wr_char>
	}
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <lcd_port_config>:
unsigned char Right_white_line = 0;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 360:	84 b3       	in	r24, 0x14	; 20
 362:	87 6f       	ori	r24, 0xF7	; 247
 364:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 366:	85 b3       	in	r24, 0x15	; 21
 368:	80 78       	andi	r24, 0x80	; 128
 36a:	85 bb       	out	0x15, r24	; 21
}
 36c:	08 95       	ret

0000036e <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;   //set PORTF direction as input
 36e:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00;  //set PORTF pins floating
 370:	1b ba       	out	0x1b, r1	; 27
}
 372:	08 95       	ret

00000374 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;    //set direction of the PORTB3 to PORTB0 pins as output
 374:	87 b3       	in	r24, 0x17	; 23
 376:	8f 60       	ori	r24, 0x0F	; 15
 378:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0;  //set initial value of the PORTB3 to PORTB0 pins to logic 0
 37a:	88 b3       	in	r24, 0x18	; 24
 37c:	80 7f       	andi	r24, 0xF0	; 240
 37e:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;    //Setting PD5 and PD4 pins as output for PWM generation
 380:	81 b3       	in	r24, 0x11	; 17
 382:	80 63       	ori	r24, 0x30	; 48
 384:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30;  //PD5 and PD4 pins are for velocity control using PWM
 386:	82 b3       	in	r24, 0x12	; 18
 388:	80 63       	ori	r24, 0x30	; 48
 38a:	82 bb       	out	0x12, r24	; 18
}
 38c:	08 95       	ret

0000038e <port_init>:

//Function to Initialize PORTS
void port_init()
{
 lcd_port_config();
 38e:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_port_config>
 adc_pin_config();		
 392:	0e 94 b7 01 	call	0x36e	; 0x36e <adc_pin_config>
 motion_pin_config();
 396:	0e 94 ba 01 	call	0x374	; 0x374 <motion_pin_config>
}
 39a:	08 95       	ret

0000039c <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
 39c:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //setup
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	8d bd       	out	0x2d, r24	; 45
 TCNT1L = 0x01;
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	9c bd       	out	0x2c, r25	; 44
 OCR1AH = 0x00;
 3a6:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
 3a8:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
 3aa:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
 3ac:	88 bd       	out	0x28, r24	; 40
 ICR1H  = 0x00;
 3ae:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
 3b0:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA1;
 3b2:	81 ea       	ldi	r24, 0xA1	; 161
 3b4:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
 3b6:	8d e0       	ldi	r24, 0x0D	; 13
 3b8:	8e bd       	out	0x2e, r24	; 46
}
 3ba:	08 95       	ret

000003bc <adc_init>:


//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
 3bc:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 3be:	80 e2       	ldi	r24, 0x20	; 32
 3c0:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
 3c2:	80 e8       	ldi	r24, 0x80	; 128
 3c4:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 3c6:	86 e8       	ldi	r24, 0x86	; 134
 3c8:	86 b9       	out	0x06, r24	; 6
}
 3ca:	08 95       	ret

000003cc <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 3cc:	87 70       	andi	r24, 0x07	; 7
 ADMUX= 0x20| Ch;	   		
 3ce:	80 62       	ori	r24, 0x20	; 32
 3d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
 3d2:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 3d4:	34 9b       	sbis	0x06, 4	; 6
 3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <ADC_Conversion+0x8>
 a=ADCH;
 3d8:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 3da:	34 9a       	sbi	0x06, 4	; 6
 return a;
}
 3dc:	08 95       	ret

000003de <print_sensor>:

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	d8 2f       	mov	r29, r24
 3e4:	c6 2f       	mov	r28, r22
 3e6:	84 2f       	mov	r24, r20
 ADC_Value = ADC_Conversion(channel);
 3e8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <ADC_Conversion>
 3ec:	48 2f       	mov	r20, r24
 3ee:	80 93 67 00 	sts	0x0067, r24
 lcd_print(row, coloumn, ADC_Value, 3);
 3f2:	8d 2f       	mov	r24, r29
 3f4:	6c 2f       	mov	r22, r28
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	23 e0       	ldi	r18, 0x03	; 3
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 406:	98 b3       	in	r25, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 408:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 40a:	8f 70       	andi	r24, 0x0F	; 15
 PortBRestore = PORTB; 			// reading the PORTB's original status
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 40c:	98 2b       	or	r25, r24
 PORTB = PortBRestore; 			// setting the command to the port
 40e:	98 bb       	out	0x18, r25	; 24
}
 410:	08 95       	ret

00000412 <forward>:

void forward (void) //both wheels forward
{
  motion_set(0x06);
 412:	86 e0       	ldi	r24, 0x06	; 6
 414:	0e 94 03 02 	call	0x406	; 0x406 <motion_set>
}
 418:	08 95       	ret

0000041a <stop>:

void stop (void) //hard stop
{
  motion_set(0x00);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 03 02 	call	0x406	; 0x406 <motion_set>
}
 420:	08 95       	ret

00000422 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
 422:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor; 
 424:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
 426:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
 428:	68 bd       	out	0x28, r22	; 40
}
 42a:	08 95       	ret

0000042c <init_devices>:

void init_devices (void)
{
 cli();          //Clears the global interrupts
 42c:	f8 94       	cli
 port_init();
 42e:	0e 94 c7 01 	call	0x38e	; 0x38e <port_init>
 timer1_init();
 432:	0e 94 ce 01 	call	0x39c	; 0x39c <timer1_init>
 adc_init();
 436:	0e 94 de 01 	call	0x3bc	; 0x3bc <adc_init>
 sei();          //Enables the global interrupts
 43a:	78 94       	sei
}
 43c:	08 95       	ret

0000043e <main>:
//Main Function
int main(void)
{
 //unsigned char flag ;

 init_devices();
 43e:	0e 94 16 02 	call	0x42c	; 0x42c <init_devices>

 lcd_set_4bit();
 442:	0e 94 49 00 	call	0x92	; 0x92 <lcd_set_4bit>
 lcd_init();
 446:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_init>

 velocity(VELOCITY_MAX,VELOCITY_MAX);    // Set the speed to max velocity
 44a:	8c e3       	ldi	r24, 0x3C	; 60
 44c:	6c e3       	ldi	r22, 0x3C	; 60
 44e:	0e 94 11 02 	call	0x422	; 0x422 <velocity>
 lcd_print (2,1,VELOCITY_MAX,3);
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	4c e3       	ldi	r20, 0x3C	; 60
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	23 e0       	ldi	r18, 0x03	; 3
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
 lcd_print (2,5,VELOCITY_MAX,3);
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	65 e0       	ldi	r22, 0x05	; 5
 466:	4c e3       	ldi	r20, 0x3C	; 60
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	23 e0       	ldi	r18, 0x03	; 3
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
 forward();                              // start to move froward
 472:	0e 94 09 02 	call	0x412	; 0x412 <forward>

 while(1)
 {
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	0e 94 e6 01 	call	0x3cc	; 0x3cc <ADC_Conversion>
 47c:	80 93 62 00 	sts	0x0062, r24
	Center_white_line = ADC_Conversion(4);	//Getting data of Center WL Sensor
 480:	84 e0       	ldi	r24, 0x04	; 4
 482:	0e 94 e6 01 	call	0x3cc	; 0x3cc <ADC_Conversion>
 486:	80 93 61 00 	sts	0x0061, r24
	Right_white_line = ADC_Conversion(5);	//Getting data of Right WL Sensor
 48a:	85 e0       	ldi	r24, 0x05	; 5
 48c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <ADC_Conversion>
 490:	80 93 60 00 	sts	0x0060, r24
 
	print_sensor(1,1,3);		//Prints value of White Line Sensor Left
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	43 e0       	ldi	r20, 0x03	; 3
 49a:	0e 94 ef 01 	call	0x3de	; 0x3de <print_sensor>
	print_sensor(1,5,4);		//Prints value of White Line Sensor Center
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	65 e0       	ldi	r22, 0x05	; 5
 4a2:	44 e0       	ldi	r20, 0x04	; 4
 4a4:	0e 94 ef 01 	call	0x3de	; 0x3de <print_sensor>
	print_sensor(1,9,5);		//Prints value of White Line Sensor Right
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	69 e0       	ldi	r22, 0x09	; 9
 4ac:	45 e0       	ldi	r20, 0x05	; 5
 4ae:	0e 94 ef 01 	call	0x3de	; 0x3de <print_sensor>

	//flag=0;

	if(Center_white_line<THRESHOLD && Left_white_line<THRESHOLD && Right_white_line<THRESHOLD)               // Is middle Whiteline is within threshold limit
 4b2:	80 91 61 00 	lds	r24, 0x0061
 4b6:	8c 33       	cpi	r24, 0x3C	; 60
 4b8:	e8 f4       	brcc	.+58     	; 0x4f4 <__stack+0x95>
 4ba:	90 91 62 00 	lds	r25, 0x0062
 4be:	9c 33       	cpi	r25, 0x3C	; 60
 4c0:	c8 f4       	brcc	.+50     	; 0x4f4 <__stack+0x95>
 4c2:	90 91 60 00 	lds	r25, 0x0060
 4c6:	9c 33       	cpi	r25, 0x3C	; 60
 4c8:	a8 f4       	brcc	.+42     	; 0x4f4 <__stack+0x95>
	{                                             
		//flag=1;
		velocity(VELOCITY_MAX,VELOCITY_MAX);      // Run robot at max velocity 
 4ca:	8c e3       	ldi	r24, 0x3C	; 60
 4cc:	6c e3       	ldi	r22, 0x3C	; 60
 4ce:	0e 94 11 02 	call	0x422	; 0x422 <velocity>
		lcd_print (2,1,VELOCITY_MAX,3);
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	4c e3       	ldi	r20, 0x3C	; 60
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	23 e0       	ldi	r18, 0x03	; 3
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
		lcd_print (2,5,VELOCITY_MAX,3);
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	65 e0       	ldi	r22, 0x05	; 5
 4e6:	4c e3       	ldi	r20, 0x3C	; 60
 4e8:	50 e0       	ldi	r21, 0x00	; 0
 4ea:	23 e0       	ldi	r18, 0x03	; 3
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
 4f2:	c1 cf       	rjmp	.-126    	; 0x476 <__stack+0x17>
	}
	else if(Center_white_line>THRESHOLD && Left_white_line<THRESHOLD && Right_white_line<THRESHOLD)               // Is middle Whiteline is within threshold limit
 4f4:	8d 33       	cpi	r24, 0x3D	; 61
 4f6:	e8 f0       	brcs	.+58     	; 0x532 <__stack+0xd3>
 4f8:	90 91 62 00 	lds	r25, 0x0062
 4fc:	9c 33       	cpi	r25, 0x3C	; 60
 4fe:	c8 f4       	brcc	.+50     	; 0x532 <__stack+0xd3>
 500:	90 91 60 00 	lds	r25, 0x0060
 504:	9c 33       	cpi	r25, 0x3C	; 60
 506:	a8 f4       	brcc	.+42     	; 0x532 <__stack+0xd3>
	{
		//flag=1;
		velocity(VELOCITY_MAX,VELOCITY_MAX);      // Run robot at max velocity
 508:	8c e3       	ldi	r24, 0x3C	; 60
 50a:	6c e3       	ldi	r22, 0x3C	; 60
 50c:	0e 94 11 02 	call	0x422	; 0x422 <velocity>
		lcd_print (2,1,VELOCITY_MAX,3);
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	4c e3       	ldi	r20, 0x3C	; 60
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	23 e0       	ldi	r18, 0x03	; 3
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
		lcd_print (2,5,VELOCITY_MAX,3);
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	65 e0       	ldi	r22, 0x05	; 5
 524:	4c e3       	ldi	r20, 0x3C	; 60
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	23 e0       	ldi	r18, 0x03	; 3
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
 530:	a2 cf       	rjmp	.-188    	; 0x476 <__stack+0x17>
	}


	
	else if(Center_white_line<THRESHOLD && Left_white_line<THRESHOLD && Right_white_line>THRESHOLD)  // Is left Whiteline is not within threshold limit
 532:	8c 33       	cpi	r24, 0x3C	; 60
 534:	e8 f4       	brcc	.+58     	; 0x570 <__stack+0x111>
 536:	90 91 62 00 	lds	r25, 0x0062
 53a:	9c 33       	cpi	r25, 0x3C	; 60
 53c:	c8 f4       	brcc	.+50     	; 0x570 <__stack+0x111>
 53e:	90 91 60 00 	lds	r25, 0x0060
 542:	9d 33       	cpi	r25, 0x3D	; 61
 544:	a8 f0       	brcs	.+42     	; 0x570 <__stack+0x111>
	{                                             
	    //	flag=1;                                                       
		velocity(VELOCITY_MAX,VELOCITY_MIN);      // Run robot left wheel at max velocity and right wheel 
 546:	8c e3       	ldi	r24, 0x3C	; 60
 548:	63 e2       	ldi	r22, 0x23	; 35
 54a:	0e 94 11 02 	call	0x422	; 0x422 <velocity>
		lcd_print (2,1,VELOCITY_MAX,3);           // at min velocity
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	4c e3       	ldi	r20, 0x3C	; 60
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	23 e0       	ldi	r18, 0x03	; 3
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
		lcd_print (2,5,VELOCITY_MIN,3);
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	65 e0       	ldi	r22, 0x05	; 5
 562:	43 e2       	ldi	r20, 0x23	; 35
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	23 e0       	ldi	r18, 0x03	; 3
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
 56e:	83 cf       	rjmp	.-250    	; 0x476 <__stack+0x17>
	}
	
	else if(Center_white_line>THRESHOLD && Left_white_line<THRESHOLD && Right_white_line>THRESHOLD)  // Is left Whiteline is not within threshold limit
 570:	8d 33       	cpi	r24, 0x3D	; 61
 572:	e8 f0       	brcs	.+58     	; 0x5ae <__stack+0x14f>
 574:	90 91 62 00 	lds	r25, 0x0062
 578:	9c 33       	cpi	r25, 0x3C	; 60
 57a:	c8 f4       	brcc	.+50     	; 0x5ae <__stack+0x14f>
 57c:	90 91 60 00 	lds	r25, 0x0060
 580:	9d 33       	cpi	r25, 0x3D	; 61
 582:	a8 f0       	brcs	.+42     	; 0x5ae <__stack+0x14f>
	{
		//	flag=1;
		velocity(VELOCITY_MAX,VELOCITY_MIN);      // Run robot left wheel at max velocity and right wheel
 584:	8c e3       	ldi	r24, 0x3C	; 60
 586:	63 e2       	ldi	r22, 0x23	; 35
 588:	0e 94 11 02 	call	0x422	; 0x422 <velocity>
		lcd_print (2,1,VELOCITY_MAX,3);           // at min velocity
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	4c e3       	ldi	r20, 0x3C	; 60
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	23 e0       	ldi	r18, 0x03	; 3
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
		lcd_print (2,5,VELOCITY_MIN,3);
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	65 e0       	ldi	r22, 0x05	; 5
 5a0:	43 e2       	ldi	r20, 0x23	; 35
 5a2:	50 e0       	ldi	r21, 0x00	; 0
 5a4:	23 e0       	ldi	r18, 0x03	; 3
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
 5ac:	64 cf       	rjmp	.-312    	; 0x476 <__stack+0x17>
	}

	
	else if(Center_white_line<THRESHOLD && Left_white_line>THRESHOLD && Right_white_line<THRESHOLD ) // Is right Whiteline is not within threshold limit
 5ae:	8c 33       	cpi	r24, 0x3C	; 60
 5b0:	e8 f4       	brcc	.+58     	; 0x5ec <__stack+0x18d>
 5b2:	90 91 62 00 	lds	r25, 0x0062
 5b6:	9d 33       	cpi	r25, 0x3D	; 61
 5b8:	c8 f0       	brcs	.+50     	; 0x5ec <__stack+0x18d>
 5ba:	90 91 60 00 	lds	r25, 0x0060
 5be:	9c 33       	cpi	r25, 0x3C	; 60
 5c0:	a8 f4       	brcc	.+42     	; 0x5ec <__stack+0x18d>
	{
		//flag=1;
		velocity(VELOCITY_MIN,VELOCITY_MAX);      // Run robot right wheel at max velocity and left wheel 
 5c2:	83 e2       	ldi	r24, 0x23	; 35
 5c4:	6c e3       	ldi	r22, 0x3C	; 60
 5c6:	0e 94 11 02 	call	0x422	; 0x422 <velocity>
		lcd_print (2,1,VELOCITY_MIN,3);           // at min velocity
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	43 e2       	ldi	r20, 0x23	; 35
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	23 e0       	ldi	r18, 0x03	; 3
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
		lcd_print (2,5,VELOCITY_MAX,3);
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	65 e0       	ldi	r22, 0x05	; 5
 5de:	4c e3       	ldi	r20, 0x3C	; 60
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	23 e0       	ldi	r18, 0x03	; 3
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
 5ea:	45 cf       	rjmp	.-374    	; 0x476 <__stack+0x17>
	}
	else if(Center_white_line>THRESHOLD && Left_white_line>THRESHOLD && Right_white_line<THRESHOLD ) // Is right Whiteline is not within threshold limit
 5ec:	8d 33       	cpi	r24, 0x3D	; 61
 5ee:	08 f4       	brcc	.+2      	; 0x5f2 <__stack+0x193>
 5f0:	42 cf       	rjmp	.-380    	; 0x476 <__stack+0x17>
 5f2:	80 91 62 00 	lds	r24, 0x0062
 5f6:	8d 33       	cpi	r24, 0x3D	; 61
 5f8:	08 f4       	brcc	.+2      	; 0x5fc <__stack+0x19d>
 5fa:	3d cf       	rjmp	.-390    	; 0x476 <__stack+0x17>
 5fc:	80 91 60 00 	lds	r24, 0x0060
 600:	8c 33       	cpi	r24, 0x3C	; 60
 602:	50 f5       	brcc	.+84     	; 0x658 <__stack+0x1f9>
	{
		//flag=1;
		velocity(VELOCITY_MIN,VELOCITY_MAX);      // Run robot right wheel at max velocity and left wheel
 604:	83 e2       	ldi	r24, 0x23	; 35
 606:	6c e3       	ldi	r22, 0x3C	; 60
 608:	0e 94 11 02 	call	0x422	; 0x422 <velocity>
		lcd_print (2,1,VELOCITY_MIN,3);           // at min velocity
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	43 e2       	ldi	r20, 0x23	; 35
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	23 e0       	ldi	r18, 0x03	; 3
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
		lcd_print (2,5,VELOCITY_MAX,3);
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	65 e0       	ldi	r22, 0x05	; 5
 620:	4c e3       	ldi	r20, 0x3C	; 60
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	23 e0       	ldi	r18, 0x03	; 3
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
 62c:	24 cf       	rjmp	.-440    	; 0x476 <__stack+0x17>

	else if(Center_white_line>THRESHOLD && Left_white_line>THRESHOLD && Right_white_line>THRESHOLD)
	                                // if all Whiteline sensor are not within threshold limit    
	{
		//flag=1;
		velocity(VELOCITY_LOW,VELOCITY_LOW);      // stop the robot
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	0e 94 11 02 	call	0x422	; 0x422 <velocity>
		lcd_print (2,1,VELOCITY_LOW,3);
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	23 e0       	ldi	r18, 0x03	; 3
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
		lcd_print (2,5,VELOCITY_LOW,3);
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	65 e0       	ldi	r22, 0x05	; 5
 64a:	40 e0       	ldi	r20, 0x00	; 0
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	23 e0       	ldi	r18, 0x03	; 3
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	0e 94 23 01 	call	0x246	; 0x246 <lcd_print>
 656:	0f cf       	rjmp	.-482    	; 0x476 <__stack+0x17>
		velocity(VELOCITY_MIN,VELOCITY_MAX);      // Run robot right wheel at max velocity and left wheel
		lcd_print (2,1,VELOCITY_MIN,3);           // at min velocity
		lcd_print (2,5,VELOCITY_MAX,3);
	}

	else if(Center_white_line>THRESHOLD && Left_white_line>THRESHOLD && Right_white_line>THRESHOLD)
 658:	80 91 60 00 	lds	r24, 0x0060
 65c:	8d 33       	cpi	r24, 0x3D	; 61
 65e:	38 f7       	brcc	.-50     	; 0x62e <__stack+0x1cf>
 660:	0a cf       	rjmp	.-492    	; 0x476 <__stack+0x17>

00000662 <__udivmodhi4>:
 662:	aa 1b       	sub	r26, r26
 664:	bb 1b       	sub	r27, r27
 666:	51 e1       	ldi	r21, 0x11	; 17
 668:	07 c0       	rjmp	.+14     	; 0x678 <__udivmodhi4_ep>

0000066a <__udivmodhi4_loop>:
 66a:	aa 1f       	adc	r26, r26
 66c:	bb 1f       	adc	r27, r27
 66e:	a6 17       	cp	r26, r22
 670:	b7 07       	cpc	r27, r23
 672:	10 f0       	brcs	.+4      	; 0x678 <__udivmodhi4_ep>
 674:	a6 1b       	sub	r26, r22
 676:	b7 0b       	sbc	r27, r23

00000678 <__udivmodhi4_ep>:
 678:	88 1f       	adc	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	5a 95       	dec	r21
 67e:	a9 f7       	brne	.-22     	; 0x66a <__udivmodhi4_loop>
 680:	80 95       	com	r24
 682:	90 95       	com	r25
 684:	bc 01       	movw	r22, r24
 686:	cd 01       	movw	r24, r26
 688:	08 95       	ret

0000068a <_exit>:
 68a:	f8 94       	cli

0000068c <__stop_program>:
 68c:	ff cf       	rjmp	.-2      	; 0x68c <__stop_program>
